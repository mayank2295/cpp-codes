// creation of linked list insertion at start end and middle 
// to procide the deletion code 

# include <iostream> 
using namespace std; 
class node{
    public:
    int data;
    node *next;
    
    node(int data){   // paramterized constructor 
    
        this->data  = data;
        node*next = nullptr;
    }
    node(){} // defualt constructor
    
    // appluing destructor 
    ~node(){
        if(this->next !=nullptr){
            delete next;
            this->next = nullptr;
        }
    }
    
};

void insertionathead(node * &head, int d){
    // create a new node 
    node *temp = new node;
    temp->data = d;
    temp->next = head;
    head = temp;
    
}

void insertionattail(node * &tail,int d){
    // create a new node 
    node *temp = new node;
    temp->data = d;
    temp->next = nullptr;
    tail->next = temp;
    tail = temp;
    
}

void insertionatmid(node * &head, node * &tail,int position, int d){
    if(position==1){
        insertionathead(head,d);
        return;
    }
    node *temp = head;
    
    int  c = 1;
    while(c<position-1){
        temp = temp->next;
        c++;
    }
    // create a new node;
    if(temp == nullptr or temp->next == nullptr){
        insertionattail(head,d);
        return ;
    }
    node *newnode = new node;
    newnode->data = d;
    newnode->next = temp->next;
    temp->next = newnode;
    
}

void print(node * &head){
    node *temp = head;
    while(temp!=nullptr){
        cout<<temp->data<<" ";
        temp = temp->next;
        
    }
    cout<<endl;
}

void deletion(int position ,node * &head){
    if(position==1){
        //starting case ;
        node *temp = head;
        head = head ->next;
        temp->next = nullptr;
        delete temp;
        
    }
    else{
        // delete any node 
        node *prev = nullptr;
        node *current = head;
        
        int c = 1;
        while(c<position){
            prev = current;
            current = current->next;
            c++;
        }
        prev->next = current->next;
        current->next = nullptr;
        delete current;
        
    }
}
int main(){
    node *node1 = new node; // creating a new node node1 
    node1->data = 20;
    node1->next = NULL;
    
    node *head = node1;
    node *tail = node1;
    
  //  insertionattail(tail,4);
    insertionathead(head,2);
    insertionattail(tail,50);
    
    insertionatmid(tail,head,2,245);
    
    deletion(1,head);
    print(head);
    
    return 0;
}
